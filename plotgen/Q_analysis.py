""" Analyses the datai generated by grab_data_many.py on COSMA and produces
    a surface density and Q plot. """

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as col
import survis
import pickle

filename = "snapshot_100_data.pkl"

def get_data():
    with open(filename, 'rb') as asset:
        return pickle.load(asset)


def plot_single(ax, data, name, cmap, vmin, vmax, extent, delta=3):
    colormap = cm.get_cmap(cmap)
    c_scale = col.Normalize(vmin=vmin , vmax=vmax)
    colormap.set_bad("black", 0.9)     

    img = ax.imshow(data,
                    vmin=vmin,
                    vmax=vmax,
                    cmap=cmap,
                    extent=extent)

    text = ax.text(extent[0] + delta, extent[2] + delta, name, color="white", size=8)

    return ax, img


if __name__ == "__main__":
    """ Run in script mode, and produce plots """
    import matplotlib.gridspec as gridspec

    fig = plt.figure(figsize=(6.3, 6.3))
    gs = gridspec.GridSpec(4, 3,
            height_ratios=[10, 10, 1, 9])

    extent = [-40, 40, -40, 40]
    vmin = 0
    vmax = 2
    cmap = "viridis"

    axes = [
        fig.add_subplot(gs[0, 0]),
        fig.add_subplot(gs[0, 1]),
        fig.add_subplot(gs[0, 2]),
        fig.add_subplot(gs[1, 0]),
        fig.add_subplot(gs[1, 1]),
        fig.add_subplot(gs[1, 2]),
        fig.add_subplot(gs[2:, 2]),
    ]

    axes[0].xaxis.tick_top()
    axes[0].tick_params(labelleft='off')
    axes[1].xaxis.tick_top()
    axes[1].tick_params(labelleft='off')
    axes[2].xaxis.tick_top()
    axes[2].yaxis.tick_right()
    axes[3].tick_params(labelleft='off', labelbottom='off')
    axes[4].tick_params(labelleft='off', labelbottom='off')
    axes[5].yaxis.tick_right()
    axes[5].tick_params(labelbottom='off')
    axes[6].yaxis.tick_right()
    axes[6].tick_params(labelbottom='off')

    cbar_ax = fig.add_subplot(gs[2, 0:2])

    sim_data = get_data()

    for plot_ax, data in zip(axes, sim_data):
        plot_ax, img = plot_single(plot_ax,
                                   sim_data[data].Q_map,
                                   data,
                                   cmap,
                                   vmin,
                                   vmax,
                                   extent)


    # JUST FOR NOW
    axes[6], img = plot_single(axes[6], sim_data['default'].Q_map, 'default', cmap, vmin, vmax, extent)
    # /JUST FOR NOW
    plt.colorbar(img, cax=cbar_ax, orientation='horizontal', label="Toomre $Q$")
    plt.tight_layout()

    fig.show()
    input()
                                   
