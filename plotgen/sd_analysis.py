""" Analyses the datai generated by grab_data_many.py on COSMA and produces
    a surface density and Q plot. """

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as col
import survis
import pickle

filename = "snapshot_100_data.pkl"

def get_data():
    try:
        with open(filename, 'rb') as asset:
            return pickle.load(asset)
    except FileNotFoundError:
        with open("plotgen/{}".format(filename), 'rb') as asset:
            return pickle.load(asset)


def plot_single(ax, data, name, cmap, vmin, vmax, extent, delta=3):
    colormap = cm.get_cmap(cmap)
    c_scale = col.Normalize(vmin=vmin , vmax=vmax)
    colormap.set_bad("black", 1.0)     

    img = ax.imshow(data,
                    vmin=vmin,
                    vmax=vmax,
                    cmap=colormap,
                    extent=extent)

    text = ax.text(extent[0] + delta, extent[2] + delta, name, color="white", size=8)

    return ax, img


if __name__ == "__main__":
    """ Run in script mode, and produce plots """
    import matplotlib.gridspec as gridspec
    from matplotlib.ticker import MaxNLocator

    print("Generating the (simulation) Toomre Q Figure -- Q_analysis.py")

    fig = plt.figure(figsize=(7.8, 7.8))
    gs = gridspec.GridSpec(4, 3,
            height_ratios=[10, 10, 1, 9])

    extent = [-40, 40, -40, 40]
    vmin = -1
    vmax = 3
    cmap = "magma"

    axes = [
        fig.add_subplot(gs[0, 0]),
        fig.add_subplot(gs[0, 1]),
        fig.add_subplot(gs[0, 2]),
        fig.add_subplot(gs[1, 0]),
        fig.add_subplot(gs[1, 1]),
        fig.add_subplot(gs[1, 2]),
        fig.add_subplot(gs[2:, 2]),
    ]

    nbins = len(axes[0].get_xticklabels())

    axes[0].xaxis.tick_top()
    axes[0].xaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
    axes[0].tick_params(labelleft='off')
    axes[1].xaxis.tick_top()
    axes[1].xaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
    axes[1].tick_params(labelleft='off')
    axes[2].xaxis.tick_top()
    axes[2].yaxis.tick_right()
    axes[3].tick_params(labelleft='off', labelbottom='off')
    axes[4].tick_params(labelleft='off', labelbottom='off')
    axes[5].yaxis.tick_right()
    axes[5].yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
    axes[5].tick_params(labelbottom='off')
    axes[6].yaxis.tick_right()
    axes[6].yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
    axes[6].tick_params(labelbottom='off')

    cbar_ax = fig.add_subplot(gs[2, 0:2])

    sim_data = get_data()

    for plot_ax, data in zip(axes, sim_data):
        plot_ax, img = plot_single(plot_ax,
                                   np.log10(sim_data[data].sd_map),
                                   data,
                                   cmap,
                                   vmin,
                                   vmax,
                                   extent)


    # JUST FOR NOW
    axes[6], img = plot_single(axes[6], sim_data['default'].sd_map, 'default', cmap, vmin, vmax, extent)
    # /JUST FOR NOW
    cb = plt.colorbar(img, cax=cbar_ax, orientation='horizontal', label="$\log\Sigma_{g}$ [$M_\odot$ $pc^{-2}$]")
    #cb.set_ticks(np.arange(0, 2, 0.25))
    #ticklabels = ["0", "0.25", "0.5", "0.75", "1.0", "1.25", "1.5", r"   1.75 $\rightarrow$"]
    #cb.set_ticklabels(ticklabels)


    axes[1].xaxis.set_label_position('top')
    axes[1].set_xlabel("Distance from galactic center [kpc]")
    axes[5].yaxis.set_label_position('right')
    axes[5].set_ylabel("Distance from galactic center [kpc]")

    pad = 0.1
    fig.subplots_adjust(left=0+pad, bottom=0+pad, right=1-pad, top=1-pad, wspace=0, hspace=0)

    import sys
    
    if "--showfig" in sys.argv:
        fig.show()
        input()
    else:
        plt.savefig("plotgen/sd_simulation.pdf", dpi=300)
                                   
